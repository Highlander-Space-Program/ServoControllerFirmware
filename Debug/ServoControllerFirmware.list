
ServoControllerFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002504  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080025c4  080025c4  000035c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025f4  080025f4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080025f4  080025f4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025f4  080025f4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025f4  080025f4  000035f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025f8  080025f8  000035f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080025fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002608  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000009c  08002608  0000409c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093c8  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fd  00000000  00000000  0000d3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0000ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c4  00000000  00000000  0000f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bb6  00000000  00000000  0000fdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6ed  00000000  00000000  00027982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb2f  00000000  00000000  0003206f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdb9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002400  00000000  00000000  000bdbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000bffe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025ac 	.word	0x080025ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080025ac 	.word	0x080025ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08c      	sub	sp, #48	@ 0x30
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa9f 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f84d 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8f1 	bl	8000414 <MX_GPIO_Init>
  MX_CAN_Init();
 8000232:	f000 f891 	bl	8000358 <MX_CAN_Init>
  MX_TIM14_Init();
 8000236:	f000 f8c7 	bl	80003c8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef filter;
  filter.FilterMaskIdHigh = 0x0;
 800023a:	2108      	movs	r1, #8
 800023c:	187b      	adds	r3, r7, r1
 800023e:	2200      	movs	r2, #0
 8000240:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow = 0x0;
 8000242:	187b      	adds	r3, r7, r1
 8000244:	2200      	movs	r2, #0
 8000246:	60da      	str	r2, [r3, #12]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000248:	187b      	adds	r3, r7, r1
 800024a:	2200      	movs	r2, #0
 800024c:	619a      	str	r2, [r3, #24]
  filter.FilterBank = 0;
 800024e:	187b      	adds	r3, r7, r1
 8000250:	2200      	movs	r2, #0
 8000252:	615a      	str	r2, [r3, #20]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000254:	187b      	adds	r3, r7, r1
 8000256:	2201      	movs	r2, #1
 8000258:	61da      	str	r2, [r3, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800025a:	187b      	adds	r3, r7, r1
 800025c:	2200      	movs	r2, #0
 800025e:	611a      	str	r2, [r3, #16]
  filter.FilterActivation = CAN_FILTER_ENABLE;
 8000260:	187b      	adds	r3, r7, r1
 8000262:	2201      	movs	r2, #1
 8000264:	621a      	str	r2, [r3, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {
 8000266:	187a      	adds	r2, r7, r1
 8000268:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <main+0x9c>)
 800026a:	0011      	movs	r1, r2
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fc01 	bl	8000a74 <HAL_CAN_ConfigFilter>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d001      	beq.n	800027a <main+0x5a>
      Error_Handler();
 8000276:	f000 f94d 	bl	8000514 <Error_Handler>

//  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)) {
//    Error_Handler();
//  };

  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800027a:	4b10      	ldr	r3, [pc, #64]	@ (80002bc <main+0x9c>)
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fceb 	bl	8000c58 <HAL_CAN_Start>
 8000282:	1e03      	subs	r3, r0, #0
 8000284:	d001      	beq.n	800028a <main+0x6a>
      Error_Handler();
 8000286:	f000 f945 	bl	8000514 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float n = 1.234f;
 800028a:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <main+0xa0>)
 800028c:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  HAL_GPIO_TogglePin(STATUS_IND_GPIO_Port, STATUS_IND_Pin);
 800028e:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <main+0xa4>)
 8000290:	2108      	movs	r1, #8
 8000292:	0018      	movs	r0, r3
 8000294:	f001 fa77 	bl	8001786 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(WARN_IND_GPIO_Port, WARN_IND_Pin);
 8000298:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <main+0xa4>)
 800029a:	2110      	movs	r1, #16
 800029c:	0018      	movs	r0, r3
 800029e:	f001 fa72 	bl	8001786 <HAL_GPIO_TogglePin>
	  send_can_msg(&n, sizeof(n));
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2104      	movs	r1, #4
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 f90a 	bl	80004c0 <send_can_msg>
	  HAL_Delay(1000);
 80002ac:	23fa      	movs	r3, #250	@ 0xfa
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fabd 	bl	8000830 <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_IND_GPIO_Port, STATUS_IND_Pin);
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	e7e9      	b.n	800028e <main+0x6e>
 80002ba:	46c0      	nop			@ (mov r8, r8)
 80002bc:	20000028 	.word	0x20000028
 80002c0:	3f9df3b6 	.word	0x3f9df3b6
 80002c4:	48000400 	.word	0x48000400

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b093      	sub	sp, #76	@ 0x4c
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	2414      	movs	r4, #20
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	0018      	movs	r0, r3
 80002d4:	2334      	movs	r3, #52	@ 0x34
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f002 f93b 	bl	8002554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	0018      	movs	r0, r3
 80002e2:	2310      	movs	r3, #16
 80002e4:	001a      	movs	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	f002 f934 	bl	8002554 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ec:	0021      	movs	r1, r4
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2201      	movs	r2, #1
 80002f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2201      	movs	r2, #1
 80002f8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2202      	movs	r2, #2
 80002fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2280      	movs	r2, #128	@ 0x80
 8000304:	0252      	lsls	r2, r2, #9
 8000306:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2280      	movs	r2, #128	@ 0x80
 800030c:	0352      	lsls	r2, r2, #13
 800030e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	187b      	adds	r3, r7, r1
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fa4f 	bl	80017bc <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000322:	f000 f8f7 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2207      	movs	r2, #7
 800032a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2202      	movs	r2, #2
 8000330:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2101      	movs	r1, #1
 8000342:	0018      	movs	r0, r3
 8000344:	f001 fdc0 	bl	8001ec8 <HAL_RCC_ClockConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800034c:	f000 f8e2 	bl	8000514 <Error_Handler>
  }
}
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b013      	add	sp, #76	@ 0x4c
 8000356:	bd90      	pop	{r4, r7, pc}

08000358 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800035c:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_CAN_Init+0x68>)
 800035e:	4a19      	ldr	r2, [pc, #100]	@ (80003c4 <MX_CAN_Init+0x6c>)
 8000360:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000362:	4b17      	ldr	r3, [pc, #92]	@ (80003c0 <MX_CAN_Init+0x68>)
 8000364:	2206      	movs	r2, #6
 8000366:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_CAN_Init+0x68>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800036e:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <MX_CAN_Init+0x68>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <MX_CAN_Init+0x68>)
 8000376:	22c0      	movs	r2, #192	@ 0xc0
 8000378:	0312      	lsls	r2, r2, #12
 800037a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800037c:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <MX_CAN_Init+0x68>)
 800037e:	2280      	movs	r2, #128	@ 0x80
 8000380:	0352      	lsls	r2, r2, #13
 8000382:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000384:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <MX_CAN_Init+0x68>)
 8000386:	2200      	movs	r2, #0
 8000388:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <MX_CAN_Init+0x68>)
 800038c:	2200      	movs	r2, #0
 800038e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000390:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <MX_CAN_Init+0x68>)
 8000392:	2200      	movs	r2, #0
 8000394:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000396:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <MX_CAN_Init+0x68>)
 8000398:	2200      	movs	r2, #0
 800039a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800039c:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <MX_CAN_Init+0x68>)
 800039e:	2200      	movs	r2, #0
 80003a0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003a2:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <MX_CAN_Init+0x68>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003a8:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <MX_CAN_Init+0x68>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fa64 	bl	8000878 <HAL_CAN_Init>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80003b4:	f000 f8ae 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003b8:	46c0      	nop			@ (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	20000028 	.word	0x20000028
 80003c4:	40006400 	.word	0x40006400

080003c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80003cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <MX_TIM14_Init+0x40>)
 80003ce:	4a0f      	ldr	r2, [pc, #60]	@ (800040c <MX_TIM14_Init+0x44>)
 80003d0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 80003d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000408 <MX_TIM14_Init+0x40>)
 80003d4:	2263      	movs	r2, #99	@ 0x63
 80003d6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <MX_TIM14_Init+0x40>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 47999;
 80003de:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <MX_TIM14_Init+0x40>)
 80003e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000410 <MX_TIM14_Init+0x48>)
 80003e2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e4:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <MX_TIM14_Init+0x40>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ea:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <MX_TIM14_Init+0x40>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80003f0:	4b05      	ldr	r3, [pc, #20]	@ (8000408 <MX_TIM14_Init+0x40>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 feb4 	bl	8002160 <HAL_TIM_Base_Init>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80003fc:	f000 f88a 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000400:	46c0      	nop			@ (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	20000050 	.word	0x20000050
 800040c:	40002000 	.word	0x40002000
 8000410:	0000bb7f 	.word	0x0000bb7f

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b089      	sub	sp, #36	@ 0x24
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	240c      	movs	r4, #12
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2314      	movs	r3, #20
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f002 f895 	bl	8002554 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042a:	4b23      	ldr	r3, [pc, #140]	@ (80004b8 <MX_GPIO_Init+0xa4>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b22      	ldr	r3, [pc, #136]	@ (80004b8 <MX_GPIO_Init+0xa4>)
 8000430:	2180      	movs	r1, #128	@ 0x80
 8000432:	03c9      	lsls	r1, r1, #15
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b1f      	ldr	r3, [pc, #124]	@ (80004b8 <MX_GPIO_Init+0xa4>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	03db      	lsls	r3, r3, #15
 8000440:	4013      	ands	r3, r2
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b1c      	ldr	r3, [pc, #112]	@ (80004b8 <MX_GPIO_Init+0xa4>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <MX_GPIO_Init+0xa4>)
 800044c:	2180      	movs	r1, #128	@ 0x80
 800044e:	0289      	lsls	r1, r1, #10
 8000450:	430a      	orrs	r2, r1
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <MX_GPIO_Init+0xa4>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	2380      	movs	r3, #128	@ 0x80
 800045a:	029b      	lsls	r3, r3, #10
 800045c:	4013      	ands	r3, r2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <MX_GPIO_Init+0xa4>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <MX_GPIO_Init+0xa4>)
 8000468:	2180      	movs	r1, #128	@ 0x80
 800046a:	02c9      	lsls	r1, r1, #11
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <MX_GPIO_Init+0xa4>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	@ 0x80
 8000476:	02db      	lsls	r3, r3, #11
 8000478:	4013      	ands	r3, r2
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STATUS_IND_Pin|WARN_IND_Pin|STATUS_INDB6_Pin|WARN_INDB7_Pin, GPIO_PIN_RESET);
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <MX_GPIO_Init+0xa8>)
 8000480:	2200      	movs	r2, #0
 8000482:	21d8      	movs	r1, #216	@ 0xd8
 8000484:	0018      	movs	r0, r3
 8000486:	f001 f961 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STATUS_IND_Pin WARN_IND_Pin STATUS_INDB6_Pin WARN_INDB7_Pin */
  GPIO_InitStruct.Pin = STATUS_IND_Pin|WARN_IND_Pin|STATUS_INDB6_Pin|WARN_INDB7_Pin;
 800048a:	0021      	movs	r1, r4
 800048c:	187b      	adds	r3, r7, r1
 800048e:	22d8      	movs	r2, #216	@ 0xd8
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <MX_GPIO_Init+0xa8>)
 80004a8:	0019      	movs	r1, r3
 80004aa:	0010      	movs	r0, r2
 80004ac:	f000 ffe6 	bl	800147c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b0:	46c0      	nop			@ (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b009      	add	sp, #36	@ 0x24
 80004b6:	bd90      	pop	{r4, r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	48000400 	.word	0x48000400

080004c0 <send_can_msg>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef send_can_msg(const uint8_t *data, size_t len) {
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b08a      	sub	sp, #40	@ 0x28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef header;
    header.IDE = CAN_ID_STD;
 80004ca:	210c      	movs	r1, #12
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
    header.StdId = TX_ID;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2288      	movs	r2, #136	@ 0x88
 80004d6:	00d2      	lsls	r2, r2, #3
 80004d8:	601a      	str	r2, [r3, #0]
    header.RTR = CAN_RTR_DATA;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
    header.TransmitGlobalTime = DISABLE;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	751a      	strb	r2, [r3, #20]
    header.DLC = len;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	611a      	str	r2, [r3, #16]

    uint32_t mailbox;

    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &header, data, &mailbox);
 80004ec:	2527      	movs	r5, #39	@ 0x27
 80004ee:	197c      	adds	r4, r7, r5
 80004f0:	2308      	movs	r3, #8
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	4805      	ldr	r0, [pc, #20]	@ (8000510 <send_can_msg+0x50>)
 80004fa:	f000 fbf3 	bl	8000ce4 <HAL_CAN_AddTxMessage>
 80004fe:	0003      	movs	r3, r0
 8000500:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {

    }

    return status;
 8000502:	197b      	adds	r3, r7, r5
 8000504:	781b      	ldrb	r3, [r3, #0]
}
 8000506:	0018      	movs	r0, r3
 8000508:	46bd      	mov	sp, r7
 800050a:	b00a      	add	sp, #40	@ 0x28
 800050c:	bdb0      	pop	{r4, r5, r7, pc}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	20000028 	.word	0x20000028

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	e7fd      	b.n	800051c <Error_Handler+0x8>

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <HAL_MspInit+0x50>)
 8000528:	699a      	ldr	r2, [r3, #24]
 800052a:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <HAL_MspInit+0x50>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	619a      	str	r2, [r3, #24]
 8000532:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <HAL_MspInit+0x50>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	2201      	movs	r2, #1
 8000538:	4013      	ands	r3, r2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <HAL_MspInit+0x50>)
 8000540:	69da      	ldr	r2, [r3, #28]
 8000542:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <HAL_MspInit+0x50>)
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	0549      	lsls	r1, r1, #21
 8000548:	430a      	orrs	r2, r1
 800054a:	61da      	str	r2, [r3, #28]
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_MspInit+0x50>)
 800054e:	69da      	ldr	r2, [r3, #28]
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	055b      	lsls	r3, r3, #21
 8000554:	4013      	ands	r3, r2
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <HAL_MspInit+0x54>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <HAL_MspInit+0x54>)
 8000560:	2110      	movs	r1, #16
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	40021000 	.word	0x40021000
 8000574:	40010000 	.word	0x40010000

08000578 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b08b      	sub	sp, #44	@ 0x2c
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	2414      	movs	r4, #20
 8000582:	193b      	adds	r3, r7, r4
 8000584:	0018      	movs	r0, r3
 8000586:	2314      	movs	r3, #20
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f001 ffe2 	bl	8002554 <memset>
  if(hcan->Instance==CAN)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a21      	ldr	r2, [pc, #132]	@ (800061c <HAL_CAN_MspInit+0xa4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d13b      	bne.n	8000612 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800059a:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <HAL_CAN_MspInit+0xa8>)
 800059c:	69da      	ldr	r2, [r3, #28]
 800059e:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <HAL_CAN_MspInit+0xa8>)
 80005a0:	2180      	movs	r1, #128	@ 0x80
 80005a2:	0489      	lsls	r1, r1, #18
 80005a4:	430a      	orrs	r2, r1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <HAL_CAN_MspInit+0xa8>)
 80005aa:	69da      	ldr	r2, [r3, #28]
 80005ac:	2380      	movs	r3, #128	@ 0x80
 80005ae:	049b      	lsls	r3, r3, #18
 80005b0:	4013      	ands	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <HAL_CAN_MspInit+0xa8>)
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <HAL_CAN_MspInit+0xa8>)
 80005bc:	2180      	movs	r1, #128	@ 0x80
 80005be:	0289      	lsls	r1, r1, #10
 80005c0:	430a      	orrs	r2, r1
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <HAL_CAN_MspInit+0xa8>)
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	2380      	movs	r3, #128	@ 0x80
 80005ca:	029b      	lsls	r3, r3, #10
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	22c0      	movs	r2, #192	@ 0xc0
 80005d6:	0152      	lsls	r2, r2, #5
 80005d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	0021      	movs	r1, r4
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2202      	movs	r2, #2
 80005e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2203      	movs	r2, #3
 80005ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2204      	movs	r2, #4
 80005f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	187a      	adds	r2, r7, r1
 80005f6:	2390      	movs	r3, #144	@ 0x90
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 ff3d 	bl	800147c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 1, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2101      	movs	r1, #1
 8000606:	201e      	movs	r0, #30
 8000608:	f000 ff06 	bl	8001418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800060c:	201e      	movs	r0, #30
 800060e:	f000 ff18 	bl	8001442 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b00b      	add	sp, #44	@ 0x2c
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	40006400 	.word	0x40006400
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <HAL_TIM_Base_MspInit+0x48>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d115      	bne.n	8000662 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <HAL_TIM_Base_MspInit+0x4c>)
 8000638:	69da      	ldr	r2, [r3, #28]
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <HAL_TIM_Base_MspInit+0x4c>)
 800063c:	2180      	movs	r1, #128	@ 0x80
 800063e:	0049      	lsls	r1, r1, #1
 8000640:	430a      	orrs	r2, r1
 8000642:	61da      	str	r2, [r3, #28]
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <HAL_TIM_Base_MspInit+0x4c>)
 8000646:	69da      	ldr	r2, [r3, #28]
 8000648:	2380      	movs	r3, #128	@ 0x80
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2103      	movs	r1, #3
 8000656:	2013      	movs	r0, #19
 8000658:	f000 fede 	bl	8001418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800065c:	2013      	movs	r0, #19
 800065e:	f000 fef0 	bl	8001442 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b004      	add	sp, #16
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	40002000 	.word	0x40002000
 8000670:	40021000 	.word	0x40021000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	e7fd      	b.n	8000678 <NMI_Handler+0x4>

0800067c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	e7fd      	b.n	8000680 <HardFault_Handler+0x4>

08000684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069c:	f000 f8ac 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80006ac:	4b03      	ldr	r3, [pc, #12]	@ (80006bc <TIM14_IRQHandler+0x14>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 fda6 	bl	8002200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80006b4:	46c0      	nop			@ (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	20000050 	.word	0x20000050

080006c0 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <CEC_CAN_IRQHandler+0x14>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fbde 	bl	8000e88 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	20000028 	.word	0x20000028

080006d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006dc:	46c0      	nop			@ (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e4:	4813      	ldr	r0, [pc, #76]	@ (8000734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e8:	f7ff fff6 	bl	80006d8 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006ec:	4812      	ldr	r0, [pc, #72]	@ (8000738 <LoopForever+0x6>)
    LDR R1, [R0]
 80006ee:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006f0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006f2:	4a12      	ldr	r2, [pc, #72]	@ (800073c <LoopForever+0xa>)
    CMP R1, R2
 80006f4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006f6:	d105      	bne.n	8000704 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80006f8:	4811      	ldr	r0, [pc, #68]	@ (8000740 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80006fa:	4912      	ldr	r1, [pc, #72]	@ (8000744 <LoopForever+0x12>)
    STR R1, [R0]
 80006fc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80006fe:	4812      	ldr	r0, [pc, #72]	@ (8000748 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000700:	4912      	ldr	r1, [pc, #72]	@ (800074c <LoopForever+0x1a>)
    STR R1, [R0]
 8000702:	6001      	str	r1, [r0, #0]

08000704 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000706:	4913      	ldr	r1, [pc, #76]	@ (8000754 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000708:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <LoopForever+0x26>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a10      	ldr	r2, [pc, #64]	@ (800075c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800071c:	4c10      	ldr	r4, [pc, #64]	@ (8000760 <LoopForever+0x2e>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072a:	f001 ff1b 	bl	8002564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072e:	f7ff fd77 	bl	8000220 <main>

08000732 <LoopForever>:

LoopForever:
    b LoopForever
 8000732:	e7fe      	b.n	8000732 <LoopForever>
  ldr   r0, =_estack
 8000734:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000738:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800073c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000740:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000744:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000748:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800074c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000758:	080025fc 	.word	0x080025fc
  ldr r2, =_sbss
 800075c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000760:	2000009c 	.word	0x2000009c

08000764 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_IRQHandler>
	...

08000768 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <HAL_Init+0x24>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_Init+0x24>)
 8000772:	2110      	movs	r1, #16
 8000774:	430a      	orrs	r2, r1
 8000776:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f809 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077e:	f7ff fecf 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <HAL_InitTick+0x5c>)
 800079a:	681c      	ldr	r4, [r3, #0]
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <HAL_InitTick+0x60>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	0019      	movs	r1, r3
 80007a2:	23fa      	movs	r3, #250	@ 0xfa
 80007a4:	0098      	lsls	r0, r3, #2
 80007a6:	f7ff fcaf 	bl	8000108 <__udivsi3>
 80007aa:	0003      	movs	r3, r0
 80007ac:	0019      	movs	r1, r3
 80007ae:	0020      	movs	r0, r4
 80007b0:	f7ff fcaa 	bl	8000108 <__udivsi3>
 80007b4:	0003      	movs	r3, r0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fe53 	bl	8001462 <HAL_SYSTICK_Config>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e00f      	b.n	80007e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d80b      	bhi.n	80007e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	2301      	movs	r3, #1
 80007ce:	425b      	negs	r3, r3
 80007d0:	2200      	movs	r2, #0
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 fe20 	bl	8001418 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_InitTick+0x64>)
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007de:	2300      	movs	r3, #0
 80007e0:	e000      	b.n	80007e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b003      	add	sp, #12
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_IncTick+0x1c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	001a      	movs	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <HAL_IncTick+0x20>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	18d2      	adds	r2, r2, r3
 8000808:	4b03      	ldr	r3, [pc, #12]	@ (8000818 <HAL_IncTick+0x20>)
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	20000008 	.word	0x20000008
 8000818:	20000098 	.word	0x20000098

0800081c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b02      	ldr	r3, [pc, #8]	@ (800082c <HAL_GetTick+0x10>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	20000098 	.word	0x20000098

08000830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000838:	f7ff fff0 	bl	800081c <HAL_GetTick>
 800083c:	0003      	movs	r3, r0
 800083e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3301      	adds	r3, #1
 8000848:	d005      	beq.n	8000856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <HAL_Delay+0x44>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	001a      	movs	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	189b      	adds	r3, r3, r2
 8000854:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	f7ff ffe0 	bl	800081c <HAL_GetTick>
 800085c:	0002      	movs	r2, r0
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	429a      	cmp	r2, r3
 8000866:	d8f7      	bhi.n	8000858 <HAL_Delay+0x28>
  {
  }
}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	20000008 	.word	0x20000008

08000878 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d101      	bne.n	800088a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e0f0      	b.n	8000a6c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2220      	movs	r2, #32
 800088e:	5c9b      	ldrb	r3, [r3, r2]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d103      	bne.n	800089e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff fe6d 	bl	8000578 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008ae:	f7ff ffb5 	bl	800081c <HAL_GetTick>
 80008b2:	0003      	movs	r3, r0
 80008b4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008b6:	e013      	b.n	80008e0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008b8:	f7ff ffb0 	bl	800081c <HAL_GetTick>
 80008bc:	0002      	movs	r2, r0
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b0a      	cmp	r3, #10
 80008c4:	d90c      	bls.n	80008e0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ca:	2280      	movs	r2, #128	@ 0x80
 80008cc:	0292      	lsls	r2, r2, #10
 80008ce:	431a      	orrs	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2220      	movs	r2, #32
 80008d8:	2105      	movs	r1, #5
 80008da:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	e0c5      	b.n	8000a6c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	d0e5      	beq.n	80008b8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2102      	movs	r1, #2
 80008f8:	438a      	bics	r2, r1
 80008fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008fc:	f7ff ff8e 	bl	800081c <HAL_GetTick>
 8000900:	0003      	movs	r3, r0
 8000902:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000904:	e013      	b.n	800092e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000906:	f7ff ff89 	bl	800081c <HAL_GetTick>
 800090a:	0002      	movs	r2, r0
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	2b0a      	cmp	r3, #10
 8000912:	d90c      	bls.n	800092e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000918:	2280      	movs	r2, #128	@ 0x80
 800091a:	0292      	lsls	r2, r2, #10
 800091c:	431a      	orrs	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2220      	movs	r2, #32
 8000926:	2105      	movs	r1, #5
 8000928:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e09e      	b.n	8000a6c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2202      	movs	r2, #2
 8000936:	4013      	ands	r3, r2
 8000938:	d1e5      	bne.n	8000906 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7e1b      	ldrb	r3, [r3, #24]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d108      	bne.n	8000954 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2180      	movs	r1, #128	@ 0x80
 800094e:	430a      	orrs	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	e007      	b.n	8000964 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	438a      	bics	r2, r1
 8000962:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	7e5b      	ldrb	r3, [r3, #25]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d108      	bne.n	800097e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2140      	movs	r1, #64	@ 0x40
 8000978:	430a      	orrs	r2, r1
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	e007      	b.n	800098e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2140      	movs	r1, #64	@ 0x40
 800098a:	438a      	bics	r2, r1
 800098c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7e9b      	ldrb	r3, [r3, #26]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d108      	bne.n	80009a8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2120      	movs	r1, #32
 80009a2:	430a      	orrs	r2, r1
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	e007      	b.n	80009b8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2120      	movs	r1, #32
 80009b4:	438a      	bics	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7edb      	ldrb	r3, [r3, #27]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d108      	bne.n	80009d2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2110      	movs	r1, #16
 80009cc:	438a      	bics	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	e007      	b.n	80009e2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2110      	movs	r1, #16
 80009de:	430a      	orrs	r2, r1
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	7f1b      	ldrb	r3, [r3, #28]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d108      	bne.n	80009fc <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2108      	movs	r1, #8
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	e007      	b.n	8000a0c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2108      	movs	r1, #8
 8000a08:	438a      	bics	r2, r1
 8000a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7f5b      	ldrb	r3, [r3, #29]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d108      	bne.n	8000a26 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2104      	movs	r1, #4
 8000a20:	430a      	orrs	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e007      	b.n	8000a36 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2104      	movs	r1, #4
 8000a32:	438a      	bics	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	431a      	orrs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2220      	movs	r2, #32
 8000a66:	2101      	movs	r1, #1
 8000a68:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b004      	add	sp, #16
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a84:	2013      	movs	r0, #19
 8000a86:	183b      	adds	r3, r7, r0
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	5c52      	ldrb	r2, [r2, r1]
 8000a8e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a90:	0002      	movs	r2, r0
 8000a92:	18bb      	adds	r3, r7, r2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d004      	beq.n	8000aa4 <HAL_CAN_ConfigFilter+0x30>
 8000a9a:	18bb      	adds	r3, r7, r2
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d000      	beq.n	8000aa4 <HAL_CAN_ConfigFilter+0x30>
 8000aa2:	e0cd      	b.n	8000c40 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	2380      	movs	r3, #128	@ 0x80
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	58d3      	ldr	r3, [r2, r3]
 8000aac:	2201      	movs	r2, #1
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	2380      	movs	r3, #128	@ 0x80
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	221f      	movs	r2, #31
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	409a      	lsls	r2, r3
 8000ac6:	0013      	movs	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	2387      	movs	r3, #135	@ 0x87
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	58d3      	ldr	r3, [r2, r3]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	0011      	movs	r1, r2
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	2387      	movs	r3, #135	@ 0x87
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d129      	bne.n	8000b3e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	2383      	movs	r3, #131	@ 0x83
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	58d3      	ldr	r3, [r2, r3]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	401a      	ands	r2, r3
 8000af8:	0011      	movs	r1, r2
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	2383      	movs	r3, #131	@ 0x83
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	041b      	lsls	r3, r3, #16
 8000b0e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b14:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3248      	adds	r2, #72	@ 0x48
 8000b1a:	00d2      	lsls	r2, r2, #3
 8000b1c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b32:	6979      	ldr	r1, [r7, #20]
 8000b34:	3348      	adds	r3, #72	@ 0x48
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	18cb      	adds	r3, r1, r3
 8000b3a:	3304      	adds	r3, #4
 8000b3c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d128      	bne.n	8000b98 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	2383      	movs	r3, #131	@ 0x83
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	58d2      	ldr	r2, [r2, r3]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	431a      	orrs	r2, r3
 8000b52:	0011      	movs	r1, r2
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	2383      	movs	r3, #131	@ 0x83
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b6e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3248      	adds	r2, #72	@ 0x48
 8000b74:	00d2      	lsls	r2, r2, #3
 8000b76:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	041b      	lsls	r3, r3, #16
 8000b84:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b8c:	6979      	ldr	r1, [r7, #20]
 8000b8e:	3348      	adds	r3, #72	@ 0x48
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	18cb      	adds	r3, r1, r3
 8000b94:	3304      	adds	r3, #4
 8000b96:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10c      	bne.n	8000bba <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	2381      	movs	r3, #129	@ 0x81
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	58d3      	ldr	r3, [r2, r3]
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	43d2      	mvns	r2, r2
 8000bac:	401a      	ands	r2, r3
 8000bae:	0011      	movs	r1, r2
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	2381      	movs	r3, #129	@ 0x81
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	50d1      	str	r1, [r2, r3]
 8000bb8:	e00a      	b.n	8000bd0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	2381      	movs	r3, #129	@ 0x81
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	58d2      	ldr	r2, [r2, r3]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	2381      	movs	r3, #129	@ 0x81
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10c      	bne.n	8000bf2 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	2385      	movs	r3, #133	@ 0x85
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	58d3      	ldr	r3, [r2, r3]
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	43d2      	mvns	r2, r2
 8000be4:	401a      	ands	r2, r3
 8000be6:	0011      	movs	r1, r2
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	2385      	movs	r3, #133	@ 0x85
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	50d1      	str	r1, [r2, r3]
 8000bf0:	e00a      	b.n	8000c08 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	2385      	movs	r3, #133	@ 0x85
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	58d2      	ldr	r2, [r2, r3]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	0011      	movs	r1, r2
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	2385      	movs	r3, #133	@ 0x85
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	6a1b      	ldr	r3, [r3, #32]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d10a      	bne.n	8000c26 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	2387      	movs	r3, #135	@ 0x87
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	58d2      	ldr	r2, [r2, r3]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	0011      	movs	r1, r2
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	2387      	movs	r3, #135	@ 0x87
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	2380      	movs	r3, #128	@ 0x80
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	58d3      	ldr	r3, [r2, r3]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4393      	bics	r3, r2
 8000c32:	0019      	movs	r1, r3
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	2380      	movs	r3, #128	@ 0x80
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e007      	b.n	8000c50 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c44:	2280      	movs	r2, #128	@ 0x80
 8000c46:	02d2      	lsls	r2, r2, #11
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
  }
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b006      	add	sp, #24
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2220      	movs	r2, #32
 8000c64:	5c9b      	ldrb	r3, [r3, r2]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d12f      	bne.n	8000ccc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2220      	movs	r2, #32
 8000c70:	2102      	movs	r1, #2
 8000c72:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2101      	movs	r1, #1
 8000c80:	438a      	bics	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c84:	f7ff fdca 	bl	800081c <HAL_GetTick>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c8c:	e013      	b.n	8000cb6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c8e:	f7ff fdc5 	bl	800081c <HAL_GetTick>
 8000c92:	0002      	movs	r2, r0
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b0a      	cmp	r3, #10
 8000c9a:	d90c      	bls.n	8000cb6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca0:	2280      	movs	r2, #128	@ 0x80
 8000ca2:	0292      	lsls	r2, r2, #10
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2220      	movs	r2, #32
 8000cae:	2105      	movs	r1, #5
 8000cb0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e012      	b.n	8000cdc <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d1e5      	bne.n	8000c8e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e007      	b.n	8000cdc <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	0312      	lsls	r2, r2, #12
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
  }
}
 8000cdc:	0018      	movs	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b004      	add	sp, #16
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cf2:	201f      	movs	r0, #31
 8000cf4:	183b      	adds	r3, r7, r0
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	5c52      	ldrb	r2, [r2, r1]
 8000cfc:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d06:	183b      	adds	r3, r7, r0
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d004      	beq.n	8000d18 <HAL_CAN_AddTxMessage+0x34>
 8000d0e:	183b      	adds	r3, r7, r0
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d000      	beq.n	8000d18 <HAL_CAN_AddTxMessage+0x34>
 8000d16:	e0ab      	b.n	8000e70 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	2380      	movs	r3, #128	@ 0x80
 8000d1c:	04db      	lsls	r3, r3, #19
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d10a      	bne.n	8000d38 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	051b      	lsls	r3, r3, #20
 8000d28:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d2a:	d105      	bne.n	8000d38 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	055b      	lsls	r3, r3, #21
 8000d32:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d34:	d100      	bne.n	8000d38 <HAL_CAN_AddTxMessage+0x54>
 8000d36:	e092      	b.n	8000e5e <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	0e1b      	lsrs	r3, r3, #24
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	4013      	ands	r3, r2
 8000d40:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d42:	2201      	movs	r2, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10c      	bne.n	8000d6e <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4311      	orrs	r1, r2
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	3218      	adds	r2, #24
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	50d1      	str	r1, [r2, r3]
 8000d6c:	e00f      	b.n	8000d8e <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000d84:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	3218      	adds	r2, #24
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6819      	ldr	r1, [r3, #0]
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3318      	adds	r3, #24
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	18cb      	adds	r3, r1, r3
 8000d9e:	3304      	adds	r3, #4
 8000da0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	7d1b      	ldrb	r3, [r3, #20]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d112      	bne.n	8000dd0 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3318      	adds	r3, #24
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	3304      	adds	r3, #4
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6819      	ldr	r1, [r3, #0]
 8000dbe:	2380      	movs	r3, #128	@ 0x80
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3318      	adds	r3, #24
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	18cb      	adds	r3, r1, r3
 8000dcc:	3304      	adds	r3, #4
 8000dce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3307      	adds	r3, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	061a      	lsls	r2, r3, #24
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3306      	adds	r3, #6
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	041b      	lsls	r3, r3, #16
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3305      	adds	r3, #5
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3304      	adds	r3, #4
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0019      	movs	r1, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	6979      	ldr	r1, [r7, #20]
 8000dfc:	23c6      	movs	r3, #198	@ 0xc6
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	0109      	lsls	r1, r1, #4
 8000e02:	1841      	adds	r1, r0, r1
 8000e04:	18cb      	adds	r3, r1, r3
 8000e06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3303      	adds	r3, #3
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	061a      	lsls	r2, r3, #24
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3302      	adds	r3, #2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	041b      	lsls	r3, r3, #16
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	0019      	movs	r1, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6818      	ldr	r0, [r3, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	6979      	ldr	r1, [r7, #20]
 8000e32:	23c4      	movs	r3, #196	@ 0xc4
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	0109      	lsls	r1, r1, #4
 8000e38:	1841      	adds	r1, r0, r1
 8000e3a:	18cb      	adds	r3, r1, r3
 8000e3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	3218      	adds	r2, #24
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	58d2      	ldr	r2, [r2, r3]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4311      	orrs	r1, r2
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	3218      	adds	r2, #24
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e010      	b.n	8000e80 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e62:	2280      	movs	r2, #128	@ 0x80
 8000e64:	0392      	lsls	r2, r2, #14
 8000e66:	431a      	orrs	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e007      	b.n	8000e80 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	02d2      	lsls	r2, r2, #11
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
  }
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b008      	add	sp, #32
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d100      	bne.n	8000ece <HAL_CAN_IRQHandler+0x46>
 8000ecc:	e084      	b.n	8000fd8 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d024      	beq.n	8000f20 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d004      	beq.n	8000ef0 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 f981 	bl	80011f0 <HAL_CAN_TxMailbox0CompleteCallback>
 8000eee:	e017      	b.n	8000f20 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d005      	beq.n	8000f04 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efa:	2280      	movs	r2, #128	@ 0x80
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	4313      	orrs	r3, r2
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f02:	e00d      	b.n	8000f20 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2208      	movs	r2, #8
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d005      	beq.n	8000f18 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	2280      	movs	r2, #128	@ 0x80
 8000f10:	0152      	lsls	r2, r2, #5
 8000f12:	4313      	orrs	r3, r2
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f16:	e003      	b.n	8000f20 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 f980 	bl	8001220 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	2380      	movs	r3, #128	@ 0x80
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4013      	ands	r3, r2
 8000f28:	d028      	beq.n	8000f7c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2280      	movs	r2, #128	@ 0x80
 8000f30:	0052      	lsls	r2, r2, #1
 8000f32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	2380      	movs	r3, #128	@ 0x80
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d004      	beq.n	8000f48 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f000 f95d 	bl	8001200 <HAL_CAN_TxMailbox1CompleteCallback>
 8000f46:	e019      	b.n	8000f7c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	2380      	movs	r3, #128	@ 0x80
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d005      	beq.n	8000f5e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	0192      	lsls	r2, r2, #6
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f5c:	e00e      	b.n	8000f7c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	4013      	ands	r3, r2
 8000f66:	d005      	beq.n	8000f74 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6a:	2280      	movs	r2, #128	@ 0x80
 8000f6c:	01d2      	lsls	r2, r2, #7
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f72:	e003      	b.n	8000f7c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 f95a 	bl	8001230 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	025b      	lsls	r3, r3, #9
 8000f82:	4013      	ands	r3, r2
 8000f84:	d028      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2280      	movs	r2, #128	@ 0x80
 8000f8c:	0252      	lsls	r2, r2, #9
 8000f8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	029b      	lsls	r3, r3, #10
 8000f96:	4013      	ands	r3, r2
 8000f98:	d004      	beq.n	8000fa4 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 f937 	bl	8001210 <HAL_CAN_TxMailbox2CompleteCallback>
 8000fa2:	e019      	b.n	8000fd8 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	02db      	lsls	r3, r3, #11
 8000faa:	4013      	ands	r3, r2
 8000fac:	d005      	beq.n	8000fba <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb0:	2280      	movs	r2, #128	@ 0x80
 8000fb2:	0212      	lsls	r2, r2, #8
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fb8:	e00e      	b.n	8000fd8 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	031b      	lsls	r3, r3, #12
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d005      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	0252      	lsls	r2, r2, #9
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fce:	e003      	b.n	8000fd8 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 f934 	bl	8001240 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	2208      	movs	r2, #8
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d00c      	beq.n	8000ffa <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d008      	beq.n	8000ffa <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fea:	2280      	movs	r2, #128	@ 0x80
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2210      	movs	r2, #16
 8000ff8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	4013      	ands	r3, r2
 8001000:	d00b      	beq.n	800101a <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2208      	movs	r2, #8
 8001006:	4013      	ands	r3, r2
 8001008:	d007      	beq.n	800101a <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2208      	movs	r2, #8
 8001010:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0018      	movs	r0, r3
 8001016:	f000 f923 	bl	8001260 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	2202      	movs	r2, #2
 800101e:	4013      	ands	r3, r2
 8001020:	d009      	beq.n	8001036 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	2203      	movs	r2, #3
 800102a:	4013      	ands	r3, r2
 800102c:	d003      	beq.n	8001036 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	f000 f90d 	bl	8001250 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	2240      	movs	r2, #64	@ 0x40
 800103a:	4013      	ands	r3, r2
 800103c:	d00c      	beq.n	8001058 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2210      	movs	r2, #16
 8001042:	4013      	ands	r3, r2
 8001044:	d008      	beq.n	8001058 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	2280      	movs	r2, #128	@ 0x80
 800104a:	00d2      	lsls	r2, r2, #3
 800104c:	4313      	orrs	r3, r2
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2210      	movs	r2, #16
 8001056:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	2220      	movs	r2, #32
 800105c:	4013      	ands	r3, r2
 800105e:	d00b      	beq.n	8001078 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2208      	movs	r2, #8
 8001064:	4013      	ands	r3, r2
 8001066:	d007      	beq.n	8001078 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2208      	movs	r2, #8
 800106e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	0018      	movs	r0, r3
 8001074:	f000 f904 	bl	8001280 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	2210      	movs	r2, #16
 800107c:	4013      	ands	r3, r2
 800107e:	d009      	beq.n	8001094 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2203      	movs	r2, #3
 8001088:	4013      	ands	r3, r2
 800108a:	d003      	beq.n	8001094 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	0018      	movs	r0, r3
 8001090:	f000 f8ee 	bl	8001270 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001094:	6a3a      	ldr	r2, [r7, #32]
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	029b      	lsls	r3, r3, #10
 800109a:	4013      	ands	r3, r2
 800109c:	d00b      	beq.n	80010b6 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	2210      	movs	r2, #16
 80010a2:	4013      	ands	r3, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2210      	movs	r2, #16
 80010ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 f8ed 	bl	8001290 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80010b6:	6a3a      	ldr	r2, [r7, #32]
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	025b      	lsls	r3, r3, #9
 80010bc:	4013      	ands	r3, r2
 80010be:	d00b      	beq.n	80010d8 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	2208      	movs	r2, #8
 80010c4:	4013      	ands	r3, r2
 80010c6:	d007      	beq.n	80010d8 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2208      	movs	r2, #8
 80010ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 f8e4 	bl	80012a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80010d8:	6a3a      	ldr	r2, [r7, #32]
 80010da:	2380      	movs	r3, #128	@ 0x80
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	4013      	ands	r3, r2
 80010e0:	d100      	bne.n	80010e4 <HAL_CAN_IRQHandler+0x25c>
 80010e2:	e074      	b.n	80011ce <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2204      	movs	r2, #4
 80010e8:	4013      	ands	r3, r2
 80010ea:	d100      	bne.n	80010ee <HAL_CAN_IRQHandler+0x266>
 80010ec:	e06b      	b.n	80011c6 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010ee:	6a3a      	ldr	r2, [r7, #32]
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4013      	ands	r3, r2
 80010f6:	d007      	beq.n	8001108 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010fe:	d003      	beq.n	8001108 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	2201      	movs	r2, #1
 8001104:	4313      	orrs	r3, r2
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001108:	6a3a      	ldr	r2, [r7, #32]
 800110a:	2380      	movs	r3, #128	@ 0x80
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4013      	ands	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2202      	movs	r2, #2
 8001116:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001118:	d003      	beq.n	8001122 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	2202      	movs	r2, #2
 800111e:	4313      	orrs	r3, r2
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001122:	6a3a      	ldr	r2, [r7, #32]
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4013      	ands	r3, r2
 800112a:	d007      	beq.n	800113c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2204      	movs	r2, #4
 8001130:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001132:	d003      	beq.n	800113c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	2204      	movs	r2, #4
 8001138:	4313      	orrs	r3, r2
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800113c:	6a3a      	ldr	r2, [r7, #32]
 800113e:	2380      	movs	r3, #128	@ 0x80
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4013      	ands	r3, r2
 8001144:	d03f      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2270      	movs	r2, #112	@ 0x70
 800114a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800114c:	d03b      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2270      	movs	r2, #112	@ 0x70
 8001152:	4013      	ands	r3, r2
 8001154:	2b60      	cmp	r3, #96	@ 0x60
 8001156:	d027      	beq.n	80011a8 <HAL_CAN_IRQHandler+0x320>
 8001158:	d82c      	bhi.n	80011b4 <HAL_CAN_IRQHandler+0x32c>
 800115a:	2b50      	cmp	r3, #80	@ 0x50
 800115c:	d01f      	beq.n	800119e <HAL_CAN_IRQHandler+0x316>
 800115e:	d829      	bhi.n	80011b4 <HAL_CAN_IRQHandler+0x32c>
 8001160:	2b40      	cmp	r3, #64	@ 0x40
 8001162:	d017      	beq.n	8001194 <HAL_CAN_IRQHandler+0x30c>
 8001164:	d826      	bhi.n	80011b4 <HAL_CAN_IRQHandler+0x32c>
 8001166:	2b30      	cmp	r3, #48	@ 0x30
 8001168:	d00f      	beq.n	800118a <HAL_CAN_IRQHandler+0x302>
 800116a:	d823      	bhi.n	80011b4 <HAL_CAN_IRQHandler+0x32c>
 800116c:	2b10      	cmp	r3, #16
 800116e:	d002      	beq.n	8001176 <HAL_CAN_IRQHandler+0x2ee>
 8001170:	2b20      	cmp	r3, #32
 8001172:	d005      	beq.n	8001180 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001174:	e01e      	b.n	80011b4 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	2208      	movs	r2, #8
 800117a:	4313      	orrs	r3, r2
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800117e:	e01a      	b.n	80011b6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001182:	2210      	movs	r2, #16
 8001184:	4313      	orrs	r3, r2
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001188:	e015      	b.n	80011b6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	2220      	movs	r2, #32
 800118e:	4313      	orrs	r3, r2
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001192:	e010      	b.n	80011b6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001196:	2240      	movs	r2, #64	@ 0x40
 8001198:	4313      	orrs	r3, r2
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800119c:	e00b      	b.n	80011b6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	2280      	movs	r2, #128	@ 0x80
 80011a2:	4313      	orrs	r3, r2
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011a6:	e006      	b.n	80011b6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	2280      	movs	r2, #128	@ 0x80
 80011ac:	0052      	lsls	r2, r2, #1
 80011ae:	4313      	orrs	r3, r2
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011b2:	e000      	b.n	80011b6 <HAL_CAN_IRQHandler+0x32e>
            break;
 80011b4:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2170      	movs	r1, #112	@ 0x70
 80011c2:	438a      	bics	r2, r1
 80011c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2204      	movs	r2, #4
 80011cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d009      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f864 	bl	80012b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b00a      	add	sp, #40	@ 0x28
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001228:	46c0      	nop			@ (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001268:	46c0      	nop			@ (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80012b8:	46c0      	nop			@ (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	0002      	movs	r2, r0
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80012d2:	d809      	bhi.n	80012e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	001a      	movs	r2, r3
 80012da:	231f      	movs	r3, #31
 80012dc:	401a      	ands	r2, r3
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <__NVIC_EnableIRQ+0x30>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	4091      	lsls	r1, r2
 80012e4:	000a      	movs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
  }
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	0002      	movs	r2, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b7f      	cmp	r3, #127	@ 0x7f
 8001308:	d828      	bhi.n	800135c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800130a:	4a2f      	ldr	r2, [pc, #188]	@ (80013c8 <__NVIC_SetPriority+0xd4>)
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b25b      	sxtb	r3, r3
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	33c0      	adds	r3, #192	@ 0xc0
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	589b      	ldr	r3, [r3, r2]
 800131a:	1dfa      	adds	r2, r7, #7
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	0011      	movs	r1, r2
 8001320:	2203      	movs	r2, #3
 8001322:	400a      	ands	r2, r1
 8001324:	00d2      	lsls	r2, r2, #3
 8001326:	21ff      	movs	r1, #255	@ 0xff
 8001328:	4091      	lsls	r1, r2
 800132a:	000a      	movs	r2, r1
 800132c:	43d2      	mvns	r2, r2
 800132e:	401a      	ands	r2, r3
 8001330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	019b      	lsls	r3, r3, #6
 8001336:	22ff      	movs	r2, #255	@ 0xff
 8001338:	401a      	ands	r2, r3
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	0018      	movs	r0, r3
 8001340:	2303      	movs	r3, #3
 8001342:	4003      	ands	r3, r0
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001348:	481f      	ldr	r0, [pc, #124]	@ (80013c8 <__NVIC_SetPriority+0xd4>)
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b25b      	sxtb	r3, r3
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	430a      	orrs	r2, r1
 8001354:	33c0      	adds	r3, #192	@ 0xc0
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800135a:	e031      	b.n	80013c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135c:	4a1b      	ldr	r2, [pc, #108]	@ (80013cc <__NVIC_SetPriority+0xd8>)
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	0019      	movs	r1, r3
 8001364:	230f      	movs	r3, #15
 8001366:	400b      	ands	r3, r1
 8001368:	3b08      	subs	r3, #8
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3306      	adds	r3, #6
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	3304      	adds	r3, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	1dfa      	adds	r2, r7, #7
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	0011      	movs	r1, r2
 800137c:	2203      	movs	r2, #3
 800137e:	400a      	ands	r2, r1
 8001380:	00d2      	lsls	r2, r2, #3
 8001382:	21ff      	movs	r1, #255	@ 0xff
 8001384:	4091      	lsls	r1, r2
 8001386:	000a      	movs	r2, r1
 8001388:	43d2      	mvns	r2, r2
 800138a:	401a      	ands	r2, r3
 800138c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	019b      	lsls	r3, r3, #6
 8001392:	22ff      	movs	r2, #255	@ 0xff
 8001394:	401a      	ands	r2, r3
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	0018      	movs	r0, r3
 800139c:	2303      	movs	r3, #3
 800139e:	4003      	ands	r3, r0
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a4:	4809      	ldr	r0, [pc, #36]	@ (80013cc <__NVIC_SetPriority+0xd8>)
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	001c      	movs	r4, r3
 80013ac:	230f      	movs	r3, #15
 80013ae:	4023      	ands	r3, r4
 80013b0:	3b08      	subs	r3, #8
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	430a      	orrs	r2, r1
 80013b6:	3306      	adds	r3, #6
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	18c3      	adds	r3, r0, r3
 80013bc:	3304      	adds	r3, #4
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b003      	add	sp, #12
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	045b      	lsls	r3, r3, #17
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d301      	bcc.n	80013e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e4:	2301      	movs	r3, #1
 80013e6:	e010      	b.n	800140a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <SysTick_Config+0x44>)
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	3a01      	subs	r2, #1
 80013ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f0:	2301      	movs	r3, #1
 80013f2:	425b      	negs	r3, r3
 80013f4:	2103      	movs	r1, #3
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff ff7c 	bl	80012f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <SysTick_Config+0x44>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <SysTick_Config+0x44>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	0018      	movs	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	210f      	movs	r1, #15
 8001424:	187b      	adds	r3, r7, r1
 8001426:	1c02      	adds	r2, r0, #0
 8001428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	187b      	adds	r3, r7, r1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b25b      	sxtb	r3, r3
 8001432:	0011      	movs	r1, r2
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff ff5d 	bl	80012f4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b004      	add	sp, #16
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	0002      	movs	r2, r0
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b25b      	sxtb	r3, r3
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff ff33 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b002      	add	sp, #8
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff ffaf 	bl	80013d0 <SysTick_Config>
 8001472:	0003      	movs	r3, r0
}
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148a:	e149      	b.n	8001720 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	4091      	lsls	r1, r2
 8001496:	000a      	movs	r2, r1
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d100      	bne.n	80014a4 <HAL_GPIO_Init+0x28>
 80014a2:	e13a      	b.n	800171a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2203      	movs	r2, #3
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d005      	beq.n	80014bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2203      	movs	r2, #3
 80014b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d130      	bne.n	800151e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	409a      	lsls	r2, r3
 80014ca:	0013      	movs	r3, r2
 80014cc:	43da      	mvns	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	409a      	lsls	r2, r3
 80014de:	0013      	movs	r3, r2
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f2:	2201      	movs	r2, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	43da      	mvns	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	2201      	movs	r2, #1
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
 8001510:	0013      	movs	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2203      	movs	r2, #3
 8001524:	4013      	ands	r3, r2
 8001526:	2b03      	cmp	r3, #3
 8001528:	d017      	beq.n	800155a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	43da      	mvns	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2203      	movs	r2, #3
 8001560:	4013      	ands	r3, r2
 8001562:	2b02      	cmp	r3, #2
 8001564:	d123      	bne.n	80015ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	58d3      	ldr	r3, [r2, r3]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2207      	movs	r2, #7
 8001578:	4013      	ands	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	43da      	mvns	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2107      	movs	r1, #7
 8001592:	400b      	ands	r3, r1
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	6939      	ldr	r1, [r7, #16]
 80015ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	43da      	mvns	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2203      	movs	r2, #3
 80015cc:	401a      	ands	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	23c0      	movs	r3, #192	@ 0xc0
 80015e8:	029b      	lsls	r3, r3, #10
 80015ea:	4013      	ands	r3, r2
 80015ec:	d100      	bne.n	80015f0 <HAL_GPIO_Init+0x174>
 80015ee:	e094      	b.n	800171a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f0:	4b51      	ldr	r3, [pc, #324]	@ (8001738 <HAL_GPIO_Init+0x2bc>)
 80015f2:	699a      	ldr	r2, [r3, #24]
 80015f4:	4b50      	ldr	r3, [pc, #320]	@ (8001738 <HAL_GPIO_Init+0x2bc>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	430a      	orrs	r2, r1
 80015fa:	619a      	str	r2, [r3, #24]
 80015fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001738 <HAL_GPIO_Init+0x2bc>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2201      	movs	r2, #1
 8001602:	4013      	ands	r3, r2
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001608:	4a4c      	ldr	r2, [pc, #304]	@ (800173c <HAL_GPIO_Init+0x2c0>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	589b      	ldr	r3, [r3, r2]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2203      	movs	r2, #3
 800161a:	4013      	ands	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	409a      	lsls	r2, r3
 8001622:	0013      	movs	r3, r2
 8001624:	43da      	mvns	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	2390      	movs	r3, #144	@ 0x90
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	429a      	cmp	r2, r3
 8001634:	d00d      	beq.n	8001652 <HAL_GPIO_Init+0x1d6>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a41      	ldr	r2, [pc, #260]	@ (8001740 <HAL_GPIO_Init+0x2c4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_GPIO_Init+0x1d2>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a40      	ldr	r2, [pc, #256]	@ (8001744 <HAL_GPIO_Init+0x2c8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x1ce>
 8001646:	2302      	movs	r3, #2
 8001648:	e004      	b.n	8001654 <HAL_GPIO_Init+0x1d8>
 800164a:	2305      	movs	r3, #5
 800164c:	e002      	b.n	8001654 <HAL_GPIO_Init+0x1d8>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x1d8>
 8001652:	2300      	movs	r3, #0
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	2103      	movs	r1, #3
 8001658:	400a      	ands	r2, r1
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	4093      	lsls	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001664:	4935      	ldr	r1, [pc, #212]	@ (800173c <HAL_GPIO_Init+0x2c0>)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001672:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43da      	mvns	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	2380      	movs	r3, #128	@ 0x80
 8001688:	035b      	lsls	r3, r3, #13
 800168a:	4013      	ands	r3, r2
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001696:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800169c:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43da      	mvns	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	039b      	lsls	r3, r3, #14
 80016b4:	4013      	ands	r3, r2
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016c0:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80016c6:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43da      	mvns	r2, r3
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	029b      	lsls	r3, r3, #10
 80016de:	4013      	ands	r3, r2
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016ea:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80016f0:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43da      	mvns	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	025b      	lsls	r3, r3, #9
 8001708:	4013      	ands	r3, r2
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	40da      	lsrs	r2, r3
 8001728:	1e13      	subs	r3, r2, #0
 800172a:	d000      	beq.n	800172e <HAL_GPIO_Init+0x2b2>
 800172c:	e6ae      	b.n	800148c <HAL_GPIO_Init+0x10>
  } 
}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b006      	add	sp, #24
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000
 8001740:	48000400 	.word	0x48000400
 8001744:	48000800 	.word	0x48000800
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	0008      	movs	r0, r1
 8001756:	0011      	movs	r1, r2
 8001758:	1cbb      	adds	r3, r7, #2
 800175a:	1c02      	adds	r2, r0, #0
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	1c7b      	adds	r3, r7, #1
 8001760:	1c0a      	adds	r2, r1, #0
 8001762:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001764:	1c7b      	adds	r3, r7, #1
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800176c:	1cbb      	adds	r3, r7, #2
 800176e:	881a      	ldrh	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001776:	1cbb      	adds	r3, r7, #2
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	000a      	movs	r2, r1
 8001790:	1cbb      	adds	r3, r7, #2
 8001792:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800179a:	1cbb      	adds	r3, r7, #2
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	041a      	lsls	r2, r3, #16
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	1cb9      	adds	r1, r7, #2
 80017aa:	8809      	ldrh	r1, [r1, #0]
 80017ac:	400b      	ands	r3, r1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
}
 80017b4:	46c0      	nop			@ (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b004      	add	sp, #16
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f000 fb76 	bl	8001ebc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	d100      	bne.n	80017dc <HAL_RCC_OscConfig+0x20>
 80017da:	e08e      	b.n	80018fa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017dc:	4bc5      	ldr	r3, [pc, #788]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	220c      	movs	r2, #12
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d00e      	beq.n	8001806 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017e8:	4bc2      	ldr	r3, [pc, #776]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	220c      	movs	r2, #12
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d117      	bne.n	8001824 <HAL_RCC_OscConfig+0x68>
 80017f4:	4bbf      	ldr	r3, [pc, #764]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	23c0      	movs	r3, #192	@ 0xc0
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	401a      	ands	r2, r3
 80017fe:	2380      	movs	r3, #128	@ 0x80
 8001800:	025b      	lsls	r3, r3, #9
 8001802:	429a      	cmp	r2, r3
 8001804:	d10e      	bne.n	8001824 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001806:	4bbb      	ldr	r3, [pc, #748]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	4013      	ands	r3, r2
 8001810:	d100      	bne.n	8001814 <HAL_RCC_OscConfig+0x58>
 8001812:	e071      	b.n	80018f8 <HAL_RCC_OscConfig+0x13c>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d000      	beq.n	800181e <HAL_RCC_OscConfig+0x62>
 800181c:	e06c      	b.n	80018f8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	f000 fb4c 	bl	8001ebc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x80>
 800182c:	4bb1      	ldr	r3, [pc, #708]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4bb0      	ldr	r3, [pc, #704]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	0249      	lsls	r1, r1, #9
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e02f      	b.n	800189c <HAL_RCC_OscConfig+0xe0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0xa2>
 8001844:	4bab      	ldr	r3, [pc, #684]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4baa      	ldr	r3, [pc, #680]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 800184a:	49ab      	ldr	r1, [pc, #684]	@ (8001af8 <HAL_RCC_OscConfig+0x33c>)
 800184c:	400a      	ands	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	4ba8      	ldr	r3, [pc, #672]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4ba7      	ldr	r3, [pc, #668]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001856:	49a9      	ldr	r1, [pc, #676]	@ (8001afc <HAL_RCC_OscConfig+0x340>)
 8001858:	400a      	ands	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	e01e      	b.n	800189c <HAL_RCC_OscConfig+0xe0>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d10e      	bne.n	8001884 <HAL_RCC_OscConfig+0xc8>
 8001866:	4ba3      	ldr	r3, [pc, #652]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4ba2      	ldr	r3, [pc, #648]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 800186c:	2180      	movs	r1, #128	@ 0x80
 800186e:	02c9      	lsls	r1, r1, #11
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	4b9f      	ldr	r3, [pc, #636]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b9e      	ldr	r3, [pc, #632]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 800187a:	2180      	movs	r1, #128	@ 0x80
 800187c:	0249      	lsls	r1, r1, #9
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0xe0>
 8001884:	4b9b      	ldr	r3, [pc, #620]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b9a      	ldr	r3, [pc, #616]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 800188a:	499b      	ldr	r1, [pc, #620]	@ (8001af8 <HAL_RCC_OscConfig+0x33c>)
 800188c:	400a      	ands	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	4b98      	ldr	r3, [pc, #608]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b97      	ldr	r3, [pc, #604]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001896:	4999      	ldr	r1, [pc, #612]	@ (8001afc <HAL_RCC_OscConfig+0x340>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d014      	beq.n	80018ce <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7fe ffba 	bl	800081c <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ae:	f7fe ffb5 	bl	800081c <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	@ 0x64
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e2fd      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c0:	4b8c      	ldr	r3, [pc, #560]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0xf2>
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7fe ffa5 	bl	800081c <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d8:	f7fe ffa0 	bl	800081c <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	@ 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e2e8      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	4b82      	ldr	r3, [pc, #520]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	@ 0x80
 80018f0:	029b      	lsls	r3, r3, #10
 80018f2:	4013      	ands	r3, r2
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x11c>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2202      	movs	r2, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d100      	bne.n	8001906 <HAL_RCC_OscConfig+0x14a>
 8001904:	e06c      	b.n	80019e0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001906:	4b7b      	ldr	r3, [pc, #492]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	220c      	movs	r2, #12
 800190c:	4013      	ands	r3, r2
 800190e:	d00e      	beq.n	800192e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001910:	4b78      	ldr	r3, [pc, #480]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	220c      	movs	r2, #12
 8001916:	4013      	ands	r3, r2
 8001918:	2b08      	cmp	r3, #8
 800191a:	d11f      	bne.n	800195c <HAL_RCC_OscConfig+0x1a0>
 800191c:	4b75      	ldr	r3, [pc, #468]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	23c0      	movs	r3, #192	@ 0xc0
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	401a      	ands	r2, r3
 8001926:	2380      	movs	r3, #128	@ 0x80
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	429a      	cmp	r2, r3
 800192c:	d116      	bne.n	800195c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	4b71      	ldr	r3, [pc, #452]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	d005      	beq.n	8001944 <HAL_RCC_OscConfig+0x188>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d001      	beq.n	8001944 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e2bb      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001944:	4b6b      	ldr	r3, [pc, #428]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	22f8      	movs	r2, #248	@ 0xf8
 800194a:	4393      	bics	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00da      	lsls	r2, r3, #3
 8001954:	4b67      	ldr	r3, [pc, #412]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	e041      	b.n	80019e0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d024      	beq.n	80019ae <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001964:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b62      	ldr	r3, [pc, #392]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 800196a:	2101      	movs	r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7fe ff54 	bl	800081c <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197a:	f7fe ff4f 	bl	800081c <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e297      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	4b59      	ldr	r3, [pc, #356]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d0f1      	beq.n	800197a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001996:	4b57      	ldr	r3, [pc, #348]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	22f8      	movs	r2, #248	@ 0xf8
 800199c:	4393      	bics	r3, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	00da      	lsls	r2, r3, #3
 80019a6:	4b53      	ldr	r3, [pc, #332]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e018      	b.n	80019e0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ae:	4b51      	ldr	r3, [pc, #324]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b50      	ldr	r3, [pc, #320]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	438a      	bics	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7fe ff2f 	bl	800081c <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c4:	f7fe ff2a 	bl	800081c <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e272      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	4b47      	ldr	r3, [pc, #284]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2202      	movs	r2, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d1f1      	bne.n	80019c4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2208      	movs	r2, #8
 80019e6:	4013      	ands	r3, r2
 80019e8:	d036      	beq.n	8001a58 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d019      	beq.n	8001a26 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f2:	4b40      	ldr	r3, [pc, #256]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80019f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019f6:	4b3f      	ldr	r3, [pc, #252]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 80019f8:	2101      	movs	r1, #1
 80019fa:	430a      	orrs	r2, r1
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7fe ff0d 	bl	800081c <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a08:	f7fe ff08 	bl	800081c <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e250      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d0f1      	beq.n	8001a08 <HAL_RCC_OscConfig+0x24c>
 8001a24:	e018      	b.n	8001a58 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a26:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a2a:	4b32      	ldr	r3, [pc, #200]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	438a      	bics	r2, r1
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7fe fef3 	bl	800081c <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7fe feee 	bl	800081c <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e236      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4e:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	2202      	movs	r2, #2
 8001a54:	4013      	ands	r3, r2
 8001a56:	d1f1      	bne.n	8001a3c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d100      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2a8>
 8001a62:	e0b5      	b.n	8001bd0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a64:	201f      	movs	r0, #31
 8001a66:	183b      	adds	r3, r7, r0
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6c:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001a6e:	69da      	ldr	r2, [r3, #28]
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	055b      	lsls	r3, r3, #21
 8001a74:	4013      	ands	r3, r2
 8001a76:	d110      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001a7a:	69da      	ldr	r2, [r3, #28]
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001a7e:	2180      	movs	r1, #128	@ 0x80
 8001a80:	0549      	lsls	r1, r1, #21
 8001a82:	430a      	orrs	r2, r1
 8001a84:	61da      	str	r2, [r3, #28]
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	2380      	movs	r3, #128	@ 0x80
 8001a8c:	055b      	lsls	r3, r3, #21
 8001a8e:	4013      	ands	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a94:	183b      	adds	r3, r7, r0
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_RCC_OscConfig+0x344>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d11a      	bne.n	8001adc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa6:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <HAL_RCC_OscConfig+0x344>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_RCC_OscConfig+0x344>)
 8001aac:	2180      	movs	r1, #128	@ 0x80
 8001aae:	0049      	lsls	r1, r1, #1
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab4:	f7fe feb2 	bl	800081c <HAL_GetTick>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001abe:	f7fe fead 	bl	800081c <HAL_GetTick>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b64      	cmp	r3, #100	@ 0x64
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e1f5      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <HAL_RCC_OscConfig+0x344>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10f      	bne.n	8001b04 <HAL_RCC_OscConfig+0x348>
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	6a1a      	ldr	r2, [r3, #32]
 8001ae8:	4b02      	ldr	r3, [pc, #8]	@ (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	621a      	str	r2, [r3, #32]
 8001af0:	e036      	b.n	8001b60 <HAL_RCC_OscConfig+0x3a4>
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	40021000 	.word	0x40021000
 8001af8:	fffeffff 	.word	0xfffeffff
 8001afc:	fffbffff 	.word	0xfffbffff
 8001b00:	40007000 	.word	0x40007000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10c      	bne.n	8001b26 <HAL_RCC_OscConfig+0x36a>
 8001b0c:	4bca      	ldr	r3, [pc, #808]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b0e:	6a1a      	ldr	r2, [r3, #32]
 8001b10:	4bc9      	ldr	r3, [pc, #804]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	438a      	bics	r2, r1
 8001b16:	621a      	str	r2, [r3, #32]
 8001b18:	4bc7      	ldr	r3, [pc, #796]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b1a:	6a1a      	ldr	r2, [r3, #32]
 8001b1c:	4bc6      	ldr	r3, [pc, #792]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b1e:	2104      	movs	r1, #4
 8001b20:	438a      	bics	r2, r1
 8001b22:	621a      	str	r2, [r3, #32]
 8001b24:	e01c      	b.n	8001b60 <HAL_RCC_OscConfig+0x3a4>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x38c>
 8001b2e:	4bc2      	ldr	r3, [pc, #776]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b30:	6a1a      	ldr	r2, [r3, #32]
 8001b32:	4bc1      	ldr	r3, [pc, #772]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b34:	2104      	movs	r1, #4
 8001b36:	430a      	orrs	r2, r1
 8001b38:	621a      	str	r2, [r3, #32]
 8001b3a:	4bbf      	ldr	r3, [pc, #764]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b3c:	6a1a      	ldr	r2, [r3, #32]
 8001b3e:	4bbe      	ldr	r3, [pc, #760]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	621a      	str	r2, [r3, #32]
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0x3a4>
 8001b48:	4bbb      	ldr	r3, [pc, #748]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	4bba      	ldr	r3, [pc, #744]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	438a      	bics	r2, r1
 8001b52:	621a      	str	r2, [r3, #32]
 8001b54:	4bb8      	ldr	r3, [pc, #736]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	4bb7      	ldr	r3, [pc, #732]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d014      	beq.n	8001b92 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7fe fe58 	bl	800081c <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	e009      	b.n	8001b86 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7fe fe53 	bl	800081c <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	4aaf      	ldr	r2, [pc, #700]	@ (8001e3c <HAL_RCC_OscConfig+0x680>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e19a      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b86:	4bac      	ldr	r3, [pc, #688]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x3b6>
 8001b90:	e013      	b.n	8001bba <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7fe fe43 	bl	800081c <HAL_GetTick>
 8001b96:	0003      	movs	r3, r0
 8001b98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9a:	e009      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7fe fe3e 	bl	800081c <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	4aa5      	ldr	r2, [pc, #660]	@ (8001e3c <HAL_RCC_OscConfig+0x680>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e185      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	4ba1      	ldr	r3, [pc, #644]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bba:	231f      	movs	r3, #31
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc4:	4b9c      	ldr	r3, [pc, #624]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	4b9b      	ldr	r3, [pc, #620]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001bca:	499d      	ldr	r1, [pc, #628]	@ (8001e40 <HAL_RCC_OscConfig+0x684>)
 8001bcc:	400a      	ands	r2, r1
 8001bce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d063      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d12a      	bne.n	8001c38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001be2:	4b95      	ldr	r3, [pc, #596]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001be6:	4b94      	ldr	r3, [pc, #592]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001be8:	2104      	movs	r1, #4
 8001bea:	430a      	orrs	r2, r1
 8001bec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001bee:	4b92      	ldr	r3, [pc, #584]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf2:	4b91      	ldr	r3, [pc, #580]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7fe fe0f 	bl	800081c <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c04:	f7fe fe0a 	bl	800081c <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e152      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c16:	4b88      	ldr	r3, [pc, #544]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d0f1      	beq.n	8001c04 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c20:	4b85      	ldr	r3, [pc, #532]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c24:	22f8      	movs	r2, #248	@ 0xf8
 8001c26:	4393      	bics	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	00da      	lsls	r2, r3, #3
 8001c30:	4b81      	ldr	r3, [pc, #516]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c36:	e034      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	3305      	adds	r3, #5
 8001c3e:	d111      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c40:	4b7d      	ldr	r3, [pc, #500]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c44:	4b7c      	ldr	r3, [pc, #496]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c46:	2104      	movs	r1, #4
 8001c48:	438a      	bics	r2, r1
 8001c4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	22f8      	movs	r2, #248	@ 0xf8
 8001c52:	4393      	bics	r3, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	00da      	lsls	r2, r3, #3
 8001c5c:	4b76      	ldr	r3, [pc, #472]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c62:	e01e      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c64:	4b74      	ldr	r3, [pc, #464]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c68:	4b73      	ldr	r3, [pc, #460]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c70:	4b71      	ldr	r3, [pc, #452]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c74:	4b70      	ldr	r3, [pc, #448]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	438a      	bics	r2, r1
 8001c7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7fe fdce 	bl	800081c <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c86:	f7fe fdc9 	bl	800081c <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e111      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c98:	4b67      	ldr	r3, [pc, #412]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d1f1      	bne.n	8001c86 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d05c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cac:	4b62      	ldr	r3, [pc, #392]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	220c      	movs	r2, #12
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b0c      	cmp	r3, #12
 8001cb6:	d00e      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	220c      	movs	r2, #12
 8001cbe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d114      	bne.n	8001cee <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	23c0      	movs	r3, #192	@ 0xc0
 8001cca:	025b      	lsls	r3, r3, #9
 8001ccc:	401a      	ands	r2, r3
 8001cce:	23c0      	movs	r3, #192	@ 0xc0
 8001cd0:	025b      	lsls	r3, r3, #9
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d10b      	bne.n	8001cee <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001cd6:	4b58      	ldr	r3, [pc, #352]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	029b      	lsls	r3, r3, #10
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d040      	beq.n	8001d64 <HAL_RCC_OscConfig+0x5a8>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d03c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0e6      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001cf6:	4b50      	ldr	r3, [pc, #320]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001cfc:	2180      	movs	r1, #128	@ 0x80
 8001cfe:	0249      	lsls	r1, r1, #9
 8001d00:	430a      	orrs	r2, r1
 8001d02:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7fe fd8a 	bl	800081c <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d0e:	f7fe fd85 	bl	800081c <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0cd      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d20:	4b45      	ldr	r3, [pc, #276]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	029b      	lsls	r3, r3, #10
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x552>
 8001d2c:	e01b      	b.n	8001d66 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d2e:	4b42      	ldr	r3, [pc, #264]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d32:	4b41      	ldr	r3, [pc, #260]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001d34:	4943      	ldr	r1, [pc, #268]	@ (8001e44 <HAL_RCC_OscConfig+0x688>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7fe fd6f 	bl	800081c <HAL_GetTick>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d44:	f7fe fd6a 	bl	800081c <HAL_GetTick>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0b2      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d56:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d5a:	2380      	movs	r3, #128	@ 0x80
 8001d5c:	029b      	lsls	r3, r3, #10
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x588>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d64:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d100      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5b4>
 8001d6e:	e0a4      	b.n	8001eba <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	220c      	movs	r2, #12
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d100      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5c2>
 8001d7c:	e078      	b.n	8001e70 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d14c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b2c      	ldr	r3, [pc, #176]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001d8c:	492e      	ldr	r1, [pc, #184]	@ (8001e48 <HAL_RCC_OscConfig+0x68c>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe fd43 	bl	800081c <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe fd3e 	bl	800081c <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e086      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	4b22      	ldr	r3, [pc, #136]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	049b      	lsls	r3, r3, #18
 8001db6:	4013      	ands	r3, r2
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dba:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	4393      	bics	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dce:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e4c <HAL_RCC_OscConfig+0x690>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de0:	431a      	orrs	r2, r3
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de8:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001dee:	2180      	movs	r1, #128	@ 0x80
 8001df0:	0449      	lsls	r1, r1, #17
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe fd11 	bl	800081c <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e00:	f7fe fd0c 	bl	800081c <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e054      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	049b      	lsls	r3, r3, #18
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x644>
 8001e1e:	e04c      	b.n	8001eba <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <HAL_RCC_OscConfig+0x67c>)
 8001e26:	4908      	ldr	r1, [pc, #32]	@ (8001e48 <HAL_RCC_OscConfig+0x68c>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7fe fcf6 	bl	800081c <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e34:	e015      	b.n	8001e62 <HAL_RCC_OscConfig+0x6a6>
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	00001388 	.word	0x00001388
 8001e40:	efffffff 	.word	0xefffffff
 8001e44:	fffeffff 	.word	0xfffeffff
 8001e48:	feffffff 	.word	0xfeffffff
 8001e4c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe fce4 	bl	800081c <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e02c      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <HAL_RCC_OscConfig+0x708>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	049b      	lsls	r3, r3, #18
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x694>
 8001e6e:	e024      	b.n	8001eba <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e01f      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <HAL_RCC_OscConfig+0x708>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <HAL_RCC_OscConfig+0x708>)
 8001e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e86:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	23c0      	movs	r3, #192	@ 0xc0
 8001e8c:	025b      	lsls	r3, r3, #9
 8001e8e:	401a      	ands	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10e      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	23f0      	movs	r3, #240	@ 0xf0
 8001eaa:	039b      	lsls	r3, r3, #14
 8001eac:	401a      	ands	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b008      	add	sp, #32
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0bf      	b.n	800205c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001edc:	4b61      	ldr	r3, [pc, #388]	@ (8002064 <HAL_RCC_ClockConfig+0x19c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d911      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b5e      	ldr	r3, [pc, #376]	@ (8002064 <HAL_RCC_ClockConfig+0x19c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4393      	bics	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	4b5b      	ldr	r3, [pc, #364]	@ (8002064 <HAL_RCC_ClockConfig+0x19c>)
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efc:	4b59      	ldr	r3, [pc, #356]	@ (8002064 <HAL_RCC_ClockConfig+0x19c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2201      	movs	r2, #1
 8001f02:	4013      	ands	r3, r2
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0a6      	b.n	800205c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2202      	movs	r2, #2
 8001f14:	4013      	ands	r3, r2
 8001f16:	d015      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d006      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f22:	4b51      	ldr	r3, [pc, #324]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4b50      	ldr	r3, [pc, #320]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001f28:	21e0      	movs	r1, #224	@ 0xe0
 8001f2a:	00c9      	lsls	r1, r1, #3
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b4d      	ldr	r3, [pc, #308]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	22f0      	movs	r2, #240	@ 0xf0
 8001f36:	4393      	bics	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d04c      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b44      	ldr	r3, [pc, #272]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d120      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e07a      	b.n	800205c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	049b      	lsls	r3, r3, #18
 8001f76:	4013      	ands	r3, r2
 8001f78:	d114      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e06e      	b.n	800205c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f86:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001f88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	029b      	lsls	r3, r3, #10
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d108      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e062      	b.n	800205c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b34      	ldr	r3, [pc, #208]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e05b      	b.n	800205c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa4:	4b30      	ldr	r3, [pc, #192]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	4393      	bics	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fc30 	bl	800081c <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc0:	e009      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc2:	f7fe fc2b 	bl	800081c <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	4a27      	ldr	r2, [pc, #156]	@ (800206c <HAL_RCC_ClockConfig+0x1a4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e042      	b.n	800205c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	220c      	movs	r2, #12
 8001fdc:	401a      	ands	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1ec      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <HAL_RCC_ClockConfig+0x19c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d211      	bcs.n	800201a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <HAL_RCC_ClockConfig+0x19c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4393      	bics	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <HAL_RCC_ClockConfig+0x19c>)
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002008:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <HAL_RCC_ClockConfig+0x19c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	4013      	ands	r3, r2
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e020      	b.n	800205c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2204      	movs	r2, #4
 8002020:	4013      	ands	r3, r2
 8002022:	d009      	beq.n	8002038 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <HAL_RCC_ClockConfig+0x1a8>)
 800202a:	4013      	ands	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8002034:	430a      	orrs	r2, r1
 8002036:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002038:	f000 f820 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800203c:	0001      	movs	r1, r0
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <HAL_RCC_ClockConfig+0x1a0>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	220f      	movs	r2, #15
 8002046:	4013      	ands	r3, r2
 8002048:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <HAL_RCC_ClockConfig+0x1ac>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	000a      	movs	r2, r1
 800204e:	40da      	lsrs	r2, r3
 8002050:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <HAL_RCC_ClockConfig+0x1b0>)
 8002052:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002054:	2003      	movs	r0, #3
 8002056:	f7fe fb9b 	bl	8000790 <HAL_InitTick>
  
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b004      	add	sp, #16
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
 800206c:	00001388 	.word	0x00001388
 8002070:	fffff8ff 	.word	0xfffff8ff
 8002074:	080025c4 	.word	0x080025c4
 8002078:	20000000 	.word	0x20000000

0800207c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002096:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	220c      	movs	r2, #12
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d046      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0xb8>
 80020a6:	d848      	bhi.n	800213a <HAL_RCC_GetSysClockFreq+0xbe>
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d002      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0x36>
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d003      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x3c>
 80020b0:	e043      	b.n	800213a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b2:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <HAL_RCC_GetSysClockFreq+0xd4>)
 80020b4:	613b      	str	r3, [r7, #16]
      break;
 80020b6:	e043      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	0c9b      	lsrs	r3, r3, #18
 80020bc:	220f      	movs	r2, #15
 80020be:	4013      	ands	r3, r2
 80020c0:	4a24      	ldr	r2, [pc, #144]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xd8>)
 80020c2:	5cd3      	ldrb	r3, [r2, r3]
 80020c4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020c6:	4b21      	ldr	r3, [pc, #132]	@ (800214c <HAL_RCC_GetSysClockFreq+0xd0>)
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	220f      	movs	r2, #15
 80020cc:	4013      	ands	r3, r2
 80020ce:	4a22      	ldr	r2, [pc, #136]	@ (8002158 <HAL_RCC_GetSysClockFreq+0xdc>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	23c0      	movs	r3, #192	@ 0xc0
 80020d8:	025b      	lsls	r3, r3, #9
 80020da:	401a      	ands	r2, r3
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	025b      	lsls	r3, r3, #9
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d109      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	481a      	ldr	r0, [pc, #104]	@ (8002150 <HAL_RCC_GetSysClockFreq+0xd4>)
 80020e8:	f7fe f80e 	bl	8000108 <__udivsi3>
 80020ec:	0003      	movs	r3, r0
 80020ee:	001a      	movs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4353      	muls	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e01a      	b.n	800212e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	23c0      	movs	r3, #192	@ 0xc0
 80020fc:	025b      	lsls	r3, r3, #9
 80020fe:	401a      	ands	r2, r3
 8002100:	23c0      	movs	r3, #192	@ 0xc0
 8002102:	025b      	lsls	r3, r3, #9
 8002104:	429a      	cmp	r2, r3
 8002106:	d109      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	4814      	ldr	r0, [pc, #80]	@ (800215c <HAL_RCC_GetSysClockFreq+0xe0>)
 800210c:	f7fd fffc 	bl	8000108 <__udivsi3>
 8002110:	0003      	movs	r3, r0
 8002112:	001a      	movs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4353      	muls	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e008      	b.n	800212e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	480c      	ldr	r0, [pc, #48]	@ (8002150 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002120:	f7fd fff2 	bl	8000108 <__udivsi3>
 8002124:	0003      	movs	r3, r0
 8002126:	001a      	movs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4353      	muls	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	613b      	str	r3, [r7, #16]
      break;
 8002132:	e005      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002134:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002136:	613b      	str	r3, [r7, #16]
      break;
 8002138:	e002      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800213a:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_RCC_GetSysClockFreq+0xd4>)
 800213c:	613b      	str	r3, [r7, #16]
      break;
 800213e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002140:	693b      	ldr	r3, [r7, #16]
}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b006      	add	sp, #24
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	40021000 	.word	0x40021000
 8002150:	007a1200 	.word	0x007a1200
 8002154:	080025d4 	.word	0x080025d4
 8002158:	080025e4 	.word	0x080025e4
 800215c:	02dc6c00 	.word	0x02dc6c00

08002160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e042      	b.n	80021f8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	223d      	movs	r2, #61	@ 0x3d
 8002176:	5c9b      	ldrb	r3, [r3, r2]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d107      	bne.n	800218e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	223c      	movs	r2, #60	@ 0x3c
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0018      	movs	r0, r3
 800218a:	f7fe fa4b 	bl	8000624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	223d      	movs	r2, #61	@ 0x3d
 8002192:	2102      	movs	r1, #2
 8002194:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	0019      	movs	r1, r3
 80021a0:	0010      	movs	r0, r2
 80021a2:	f000 f943 	bl	800242c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2246      	movs	r2, #70	@ 0x46
 80021aa:	2101      	movs	r1, #1
 80021ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	223e      	movs	r2, #62	@ 0x3e
 80021b2:	2101      	movs	r1, #1
 80021b4:	5499      	strb	r1, [r3, r2]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	223f      	movs	r2, #63	@ 0x3f
 80021ba:	2101      	movs	r1, #1
 80021bc:	5499      	strb	r1, [r3, r2]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2240      	movs	r2, #64	@ 0x40
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2241      	movs	r2, #65	@ 0x41
 80021ca:	2101      	movs	r1, #1
 80021cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2242      	movs	r2, #66	@ 0x42
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2243      	movs	r2, #67	@ 0x43
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2244      	movs	r2, #68	@ 0x44
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2245      	movs	r2, #69	@ 0x45
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	223d      	movs	r2, #61	@ 0x3d
 80021f2:	2101      	movs	r1, #1
 80021f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d021      	beq.n	8002264 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2202      	movs	r2, #2
 8002224:	4013      	ands	r3, r2
 8002226:	d01d      	beq.n	8002264 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2203      	movs	r2, #3
 800222e:	4252      	negs	r2, r2
 8002230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2203      	movs	r2, #3
 8002240:	4013      	ands	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	0018      	movs	r0, r3
 8002248:	f000 f8d8 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 800224c:	e007      	b.n	800225e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	0018      	movs	r0, r3
 8002252:	f000 f8cb 	bl	80023ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 f8d7 	bl	800240c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2204      	movs	r2, #4
 8002268:	4013      	ands	r3, r2
 800226a:	d022      	beq.n	80022b2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2204      	movs	r2, #4
 8002270:	4013      	ands	r3, r2
 8002272:	d01e      	beq.n	80022b2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2205      	movs	r2, #5
 800227a:	4252      	negs	r2, r2
 800227c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	23c0      	movs	r3, #192	@ 0xc0
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4013      	ands	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 f8b1 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 800229a:	e007      	b.n	80022ac <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	0018      	movs	r0, r3
 80022a0:	f000 f8a4 	bl	80023ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f8b0 	bl	800240c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2208      	movs	r2, #8
 80022b6:	4013      	ands	r3, r2
 80022b8:	d021      	beq.n	80022fe <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2208      	movs	r2, #8
 80022be:	4013      	ands	r3, r2
 80022c0:	d01d      	beq.n	80022fe <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2209      	movs	r2, #9
 80022c8:	4252      	negs	r2, r2
 80022ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2204      	movs	r2, #4
 80022d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2203      	movs	r2, #3
 80022da:	4013      	ands	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f88b 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 80022e6:	e007      	b.n	80022f8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 f87e 	bl	80023ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 f88a 	bl	800240c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2210      	movs	r2, #16
 8002302:	4013      	ands	r3, r2
 8002304:	d022      	beq.n	800234c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2210      	movs	r2, #16
 800230a:	4013      	ands	r3, r2
 800230c:	d01e      	beq.n	800234c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2211      	movs	r2, #17
 8002314:	4252      	negs	r2, r2
 8002316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2208      	movs	r2, #8
 800231c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	23c0      	movs	r3, #192	@ 0xc0
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4013      	ands	r3, r2
 800232a:	d004      	beq.n	8002336 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f000 f864 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 8002334:	e007      	b.n	8002346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 f857 	bl	80023ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0018      	movs	r0, r3
 8002342:	f000 f863 	bl	800240c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2201      	movs	r2, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d00c      	beq.n	800236e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	4013      	ands	r3, r2
 800235a:	d008      	beq.n	800236e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2202      	movs	r2, #2
 8002362:	4252      	negs	r2, r2
 8002364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0018      	movs	r0, r3
 800236a:	f000 f837 	bl	80023dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2280      	movs	r2, #128	@ 0x80
 8002372:	4013      	ands	r3, r2
 8002374:	d00c      	beq.n	8002390 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2280      	movs	r2, #128	@ 0x80
 800237a:	4013      	ands	r3, r2
 800237c:	d008      	beq.n	8002390 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2281      	movs	r2, #129	@ 0x81
 8002384:	4252      	negs	r2, r2
 8002386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f8da 	bl	8002544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2240      	movs	r2, #64	@ 0x40
 8002394:	4013      	ands	r3, r2
 8002396:	d00c      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2240      	movs	r2, #64	@ 0x40
 800239c:	4013      	ands	r3, r2
 800239e:	d008      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2241      	movs	r2, #65	@ 0x41
 80023a6:	4252      	negs	r2, r2
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 f835 	bl	800241c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2220      	movs	r2, #32
 80023b6:	4013      	ands	r3, r2
 80023b8:	d00c      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	4013      	ands	r3, r2
 80023c0:	d008      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2221      	movs	r2, #33	@ 0x21
 80023c8:	4252      	negs	r2, r2
 80023ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 f8b0 	bl	8002534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d4:	46c0      	nop			@ (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b004      	add	sp, #16
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023e4:	46c0      	nop			@ (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023f4:	46c0      	nop			@ (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002404:	46c0      	nop			@ (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002414:	46c0      	nop			@ (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}

0800242c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a37      	ldr	r2, [pc, #220]	@ (800251c <TIM_Base_SetConfig+0xf0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d008      	beq.n	8002456 <TIM_Base_SetConfig+0x2a>
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	05db      	lsls	r3, r3, #23
 800244a:	429a      	cmp	r2, r3
 800244c:	d003      	beq.n	8002456 <TIM_Base_SetConfig+0x2a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a33      	ldr	r2, [pc, #204]	@ (8002520 <TIM_Base_SetConfig+0xf4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d108      	bne.n	8002468 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2270      	movs	r2, #112	@ 0x70
 800245a:	4393      	bics	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a2c      	ldr	r2, [pc, #176]	@ (800251c <TIM_Base_SetConfig+0xf0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d014      	beq.n	800249a <TIM_Base_SetConfig+0x6e>
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	05db      	lsls	r3, r3, #23
 8002476:	429a      	cmp	r2, r3
 8002478:	d00f      	beq.n	800249a <TIM_Base_SetConfig+0x6e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a28      	ldr	r2, [pc, #160]	@ (8002520 <TIM_Base_SetConfig+0xf4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00b      	beq.n	800249a <TIM_Base_SetConfig+0x6e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a27      	ldr	r2, [pc, #156]	@ (8002524 <TIM_Base_SetConfig+0xf8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <TIM_Base_SetConfig+0x6e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a26      	ldr	r2, [pc, #152]	@ (8002528 <TIM_Base_SetConfig+0xfc>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d003      	beq.n	800249a <TIM_Base_SetConfig+0x6e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a25      	ldr	r2, [pc, #148]	@ (800252c <TIM_Base_SetConfig+0x100>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d108      	bne.n	80024ac <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a24      	ldr	r2, [pc, #144]	@ (8002530 <TIM_Base_SetConfig+0x104>)
 800249e:	4013      	ands	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	4393      	bics	r3, r2
 80024b2:	001a      	movs	r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a11      	ldr	r2, [pc, #68]	@ (800251c <TIM_Base_SetConfig+0xf0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <TIM_Base_SetConfig+0xbe>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a12      	ldr	r2, [pc, #72]	@ (8002528 <TIM_Base_SetConfig+0xfc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d003      	beq.n	80024ea <TIM_Base_SetConfig+0xbe>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a11      	ldr	r2, [pc, #68]	@ (800252c <TIM_Base_SetConfig+0x100>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d103      	bne.n	80024f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2201      	movs	r2, #1
 800250a:	4393      	bics	r3, r2
 800250c:	001a      	movs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	611a      	str	r2, [r3, #16]
  }
}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	40012c00 	.word	0x40012c00
 8002520:	40000400 	.word	0x40000400
 8002524:	40002000 	.word	0x40002000
 8002528:	40014400 	.word	0x40014400
 800252c:	40014800 	.word	0x40014800
 8002530:	fffffcff 	.word	0xfffffcff

08002534 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800253c:	46c0      	nop			@ (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b002      	add	sp, #8
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800254c:	46c0      	nop			@ (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b002      	add	sp, #8
 8002552:	bd80      	pop	{r7, pc}

08002554 <memset>:
 8002554:	0003      	movs	r3, r0
 8002556:	1882      	adds	r2, r0, r2
 8002558:	4293      	cmp	r3, r2
 800255a:	d100      	bne.n	800255e <memset+0xa>
 800255c:	4770      	bx	lr
 800255e:	7019      	strb	r1, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	e7f9      	b.n	8002558 <memset+0x4>

08002564 <__libc_init_array>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	2600      	movs	r6, #0
 8002568:	4c0c      	ldr	r4, [pc, #48]	@ (800259c <__libc_init_array+0x38>)
 800256a:	4d0d      	ldr	r5, [pc, #52]	@ (80025a0 <__libc_init_array+0x3c>)
 800256c:	1b64      	subs	r4, r4, r5
 800256e:	10a4      	asrs	r4, r4, #2
 8002570:	42a6      	cmp	r6, r4
 8002572:	d109      	bne.n	8002588 <__libc_init_array+0x24>
 8002574:	2600      	movs	r6, #0
 8002576:	f000 f819 	bl	80025ac <_init>
 800257a:	4c0a      	ldr	r4, [pc, #40]	@ (80025a4 <__libc_init_array+0x40>)
 800257c:	4d0a      	ldr	r5, [pc, #40]	@ (80025a8 <__libc_init_array+0x44>)
 800257e:	1b64      	subs	r4, r4, r5
 8002580:	10a4      	asrs	r4, r4, #2
 8002582:	42a6      	cmp	r6, r4
 8002584:	d105      	bne.n	8002592 <__libc_init_array+0x2e>
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	00b3      	lsls	r3, r6, #2
 800258a:	58eb      	ldr	r3, [r5, r3]
 800258c:	4798      	blx	r3
 800258e:	3601      	adds	r6, #1
 8002590:	e7ee      	b.n	8002570 <__libc_init_array+0xc>
 8002592:	00b3      	lsls	r3, r6, #2
 8002594:	58eb      	ldr	r3, [r5, r3]
 8002596:	4798      	blx	r3
 8002598:	3601      	adds	r6, #1
 800259a:	e7f2      	b.n	8002582 <__libc_init_array+0x1e>
 800259c:	080025f4 	.word	0x080025f4
 80025a0:	080025f4 	.word	0x080025f4
 80025a4:	080025f8 	.word	0x080025f8
 80025a8:	080025f4 	.word	0x080025f4

080025ac <_init>:
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b2:	bc08      	pop	{r3}
 80025b4:	469e      	mov	lr, r3
 80025b6:	4770      	bx	lr

080025b8 <_fini>:
 80025b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025be:	bc08      	pop	{r3}
 80025c0:	469e      	mov	lr, r3
 80025c2:	4770      	bx	lr
